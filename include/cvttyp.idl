/*
 * Copyright (C) 2020 Alistair Leslie-Hughes
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301, USA
 */

#if 0
#pragma makedep install
#endif

[
    object,
    uuid(0c733a88-2a1c-11ce-ade5-00aa0044773d),
    pointer_default(unique)
]
interface IConvertType : IUnknown
{
    typedef DWORD DBCONVERTFLAGS;

    enum DBCONVERTFLAGSENUM
    {
        DBCONVERTFLAGS_COLUMN    = 0x000,
        DBCONVERTFLAGS_PARAMETER = 0x001,
    };

    enum DBCONVERTFLAGSENUM20
    {
        DBCONVERTFLAGS_ISLONG        = 0x002,
        DBCONVERTFLAGS_ISFIXEDLENGTH = 0x004,
        DBCONVERTFLAGS_FROMVARIANT   = 0x008,
    };

    [local]
    HRESULT CanConvert([in] DBTYPE from, [in] DBTYPE to, [in] DBCONVERTFLAGS flags);

    [call_as(CanConvert)]
    HRESULT RemoteCanConvert([in] DBTYPE from, [in] DBTYPE to, [in] DBCONVERTFLAGS flags, [out] IErrorInfo **error);
}
