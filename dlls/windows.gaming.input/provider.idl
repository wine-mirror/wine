/*
 * Copyright 2022 RÃ©mi Bernon for CodeWeavers
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301, USA
 */

#pragma makedep header

#ifdef __WIDL__
#pragma winrt ns_prefix
#endif

import "propidl.idl";
import "inspectable.idl";
import "eventtoken.idl";
import "windowscontracts.idl";
import "windows.foundation.idl";
import "windows.gaming.input.idl";
import "windows.gaming.input.custom.idl";
import "windows.gaming.input.forcefeedback.idl";

namespace Windows.Gaming.Input.Custom {
    typedef enum WineGameControllerType WineGameControllerType;
    typedef enum WineForceFeedbackEffectType WineForceFeedbackEffectType;
    typedef struct WineGameControllerState WineGameControllerState;
    typedef struct WineGameControllerVibration WineGameControllerVibration;
    typedef struct WineConditionEffectParameters WineConditionEffectParameters;
    typedef struct WineConstantEffectParameters WineConstantEffectParameters;
    typedef struct WineRampEffectParameters WineRampEffectParameters;
    typedef struct WinePeriodicEffectParameters WinePeriodicEffectParameters;
    typedef struct WineForceFeedbackEffectEnvelope WineForceFeedbackEffectEnvelope;
    typedef union WineForceFeedbackEffectParameters WineForceFeedbackEffectParameters;
    interface IWineGameControllerProvider;
    runtimeclass WineGameControllerProvider;

    enum WineGameControllerType
    {
        Joystick = 0,
        Gamepad = 1,
        RacingWheel = 2,
    };

    enum WineForceFeedbackEffectType
    {
        Constant = 1,
        Ramp = 2,

        Periodic = 10,
        /* same order as PeriodicForceEffectKind */
        Periodic_SquareWave = 10,
        Periodic_SineWave = 11,
        Periodic_TriangleWave = 12,
        Periodic_SawtoothWaveUp = 13,
        Periodic_SawtoothWaveDown = 14,

        Condition = 20,
        /* same order as ConditionForceEffectKind */
        Condition_Spring = 20,
        Condition_Damper = 21,
        Condition_Inertia = 22,
        Condition_Friction = 23,
    };

    struct WineGameControllerState
    {
        UINT64 timestamp;
        DOUBLE axes[32];
        BOOLEAN buttons[128];
        Windows.Gaming.Input.GameControllerSwitchPosition switches[4];
    };

    struct WineGameControllerVibration
    {
        UINT16 rumble;
        UINT16 buzz;
        UINT16 left;
        UINT16 right;
    };

    struct WineConditionEffectParameters
    {
        WineForceFeedbackEffectType type;
        Windows.Foundation.Numerics.Vector3 direction;
        FLOAT positive_coeff;
        FLOAT negative_coeff;
        FLOAT max_positive_magnitude;
        FLOAT max_negative_magnitude;
        FLOAT deadzone;
        FLOAT bias;
    };

    struct WineConstantEffectParameters
    {
        WineForceFeedbackEffectType type;
        Windows.Foundation.Numerics.Vector3 direction;
        Windows.Foundation.TimeSpan duration;
        Windows.Foundation.TimeSpan start_delay;
        UINT32 repeat_count;
        FLOAT gain;
    };

    struct WineRampEffectParameters
    {
        WineForceFeedbackEffectType type;
        Windows.Foundation.Numerics.Vector3 start_vector;
        Windows.Foundation.Numerics.Vector3 end_vector;
        Windows.Foundation.TimeSpan duration;
        Windows.Foundation.TimeSpan start_delay;
        UINT32 repeat_count;
        FLOAT gain;
    };

    struct WinePeriodicEffectParameters
    {
        WineForceFeedbackEffectType type;
        Windows.Foundation.Numerics.Vector3 direction;
        Windows.Foundation.TimeSpan duration;
        Windows.Foundation.TimeSpan start_delay;
        UINT32 repeat_count;
        FLOAT frequency;
        FLOAT phase;
        FLOAT bias;
        FLOAT gain;
    };

    struct WineForceFeedbackEffectEnvelope
    {
        FLOAT attack_gain;
        FLOAT release_gain;
        Windows.Foundation.TimeSpan attack_duration;
        Windows.Foundation.TimeSpan release_duration;
    };

    union WineForceFeedbackEffectParameters
    {
        WineForceFeedbackEffectType type;
        WineConditionEffectParameters condition;
        WineConstantEffectParameters constant;
        WineRampEffectParameters ramp;
        WinePeriodicEffectParameters periodic;
    };

    [
        uuid(06e58977-7684-4dc5-bad1-cda52a4aa06d)
    ]
    interface IGameControllerImpl : IInspectable
        requires Windows.Gaming.Input.Custom.IGameControllerInputSink
    {
        HRESULT Initialize([in] Windows.Gaming.Input.IGameController *outer,
                           [in] Windows.Gaming.Input.Custom.IGameControllerProvider *provider);
    }

    [
        exclusiveto(Windows.Gaming.Input.Custom.WineGameControllerProvider),
        uuid(8967b6ef-a4de-4b9a-984a-9f920b4d1b26)
    ]
    interface IWineGameControllerProvider : IInspectable
        requires Windows.Gaming.Input.Custom.IGameControllerProvider
    {
        [propget] HRESULT Type([out, retval] WineGameControllerType *value);
        [propget] HRESULT AxisCount([out, retval] INT32 *value);
        [propget] HRESULT ButtonCount([out, retval] INT32 *value);
        [propget] HRESULT SwitchCount([out, retval] INT32 *value);

        [propget] HRESULT State([out, retval] WineGameControllerState *state);
        [propget] HRESULT Vibration([out, retval] WineGameControllerVibration *vibration);
        [propput] HRESULT Vibration([in] WineGameControllerVibration vibration);

        [propget] HRESULT ForceFeedbackMotor([out, retval] Windows.Gaming.Input.ForceFeedback.ForceFeedbackMotor **motor);
    }

    [
        uuid(27833469-7760-417e-adbe-e011a66e16ee)
    ]
    interface IWineForceFeedbackEffectImpl : IUnknown
        requires Windows.Gaming.Input.ForceFeedback.IForceFeedbackEffect
    {
        [propput] HRESULT Parameters([in] WineForceFeedbackEffectParameters parameters,
                                     [in, optional] WineForceFeedbackEffectEnvelope *envelope);
    }

    [
        marshaling_behavior(agile),
        threading(both)
    ]
    runtimeclass WineGameControllerProvider
    {
        [default] interface Windows.Gaming.Input.Custom.IWineGameControllerProvider;
        interface Windows.Gaming.Input.Custom.IGameControllerProvider;
    }
}
