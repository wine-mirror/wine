/*
 * Copyright 2022 Zhiyi Zhang for CodeWeavers
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301, USA
 */

import "strmif.idl";

typedef float MP_DATA;
typedef DWORD MP_CAPS;
typedef DWORD MP_FLAGS;
typedef DWORD MP_TIMEDATA;

typedef enum _MP_Type
{
    MPT_INT,
    MPT_FLOAT,
    MPT_BOOL,
    MPT_ENUM,
    MPT_MAX,
} MP_TYPE;

typedef struct _MP_PARAMINFO
{
    MP_TYPE mpType;
    MP_CAPS mopCaps;
    MP_DATA mpdMinValue;
    MP_DATA mpdMaxValue;
    MP_DATA mpdNeutralValue;
    WCHAR szUnitText[32];
    WCHAR szLabel[32];
} MP_PARAMINFO;

typedef enum _MP_CURVE_TYPE {
    MP_CURVE_JUMP = 0x0001,
    MP_CURVE_LINEAR = 0x0002,
    MP_CURVE_SQUARE = 0x0004,
    MP_CURVE_INVSQUARE = 0x0008,
    MP_CURVE_SINE = 0x0010,
} MP_CURVE_TYPE;

const MP_FLAGS MPF_ENVLP_STANDARD = 0x0000;
const MP_FLAGS MPF_ENVLP_BEGIN_CURRENTVAL = 0x0001;
const MP_FLAGS MPF_ENVLP_BEGIN_NEUTRALVAL = 0x0002;

typedef struct _MP_ENVELOPE_SEGMENT
{
    REFERENCE_TIME rtStart;
    REFERENCE_TIME rtEnd;
    MP_DATA valStart;
    MP_DATA valEnd;
    MP_CURVE_TYPE iCurve;
    MP_FLAGS flags;
} MP_ENVELOPE_SEGMENT;

[
object,
uuid(6D6CBB60-A223-44AA-842F-A2F06750BE6D),
version(1.0)
]
interface IMediaParamInfo : IUnknown
{
    HRESULT GetParamCount([out] DWORD *count);
    HRESULT GetParamInfo([in] DWORD index, [out] MP_PARAMINFO *info);
    HRESULT GetParamText([in] DWORD index, [out] WCHAR **text);
    HRESULT GetNumTimeFormats([out] DWORD *count);
    HRESULT GetSupportedTimeFormat([in] DWORD index, [out] GUID *guid);
    HRESULT GetCurrentTimeFormat([out] GUID *guid, [out] MP_TIMEDATA *time_data);
}

[
object,
uuid(6d6cbb61-a223-44aa-842f-a2f06750be6e),
version(1.0)
]
interface IMediaParams : IUnknown
{
    HRESULT GetParam([in] DWORD index, [out] MP_DATA *data);
    HRESULT SetParam([in] DWORD index, [in] MP_DATA data);
    HRESULT AddEnvelope([in] DWORD index, [in] DWORD count, [in] MP_ENVELOPE_SEGMENT *segments);
    HRESULT FlushEnvelope([in] DWORD index, [in] REFERENCE_TIME start, [in] REFERENCE_TIME end);
    HRESULT SetTimeFormat([in] GUID guid, [in] MP_TIMEDATA time_data);
}
